# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

pool:
  vmImage: ubuntu-18.04
resources:
  repositories:
  - repository: templates
    type: github
    name: CroudTech/devops-azure-pipelines-step-templates
    ref: master
    endpoint: CroudTech
  - repository: self
variables:
  - group: "package_managers"
  - name: python_version
    value: 3.8
jobs:
  - job: test
    displayName: Test
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python_version)"
        displayName: "Use Python $(python_version)"

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: "Install dependencies"

      - script: |
          export AWS_DEFAULT_REGION=eu-west-2
          pip install pytest pytest-cov pytest-azurepipelines
          pytest
        displayName: "pytest"
  - job: build
    displayName: Build
    dependsOn: test
    condition: and(succeeded(), in(variables['Build.SourceBranchName'],  'integration', 'main'))
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python_version)"
        displayName: "Use Python $(python_version)"
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: 5.x
      - task: gitversion/execute@0
        displayName: Use GitVersion
      - script: | 
          pip install -r requirements.dev.txt
          python -m build
          python -m twine upload ./dist/* --non-interactive -u __token__ -p $(pypi_token)
          pip install pyinstaller
          pyinstaller  --onefile ./croudtech_bootstrap_app/croudtech-bootstrap.py --clean
          cp ./dist/croudtech-bootstrap $(Build.ArtifactStagingDirectory)/croudtech-bootstrap
  - job: BuildImage
    displayName: Build Image
    condition: and(succeeded(), in(variables['Build.SourceBranchName'], 'integration',
      'master', 'main'))
    steps:
      - task: UpdateBuildNumber@0
        inputs:
          buildNumber: $(Build.SourceBranchName)_$(Build.BuildNumber)
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '18.14.x'
      - task: Yarn@2
        inputs:
          ProjectDirectory: './cdk'
      - task: AWSShellScript@1
        displayName: Integration Build
        condition: and(succeeded(), in(variables['Build.SourceBranchName'], 'integration'))
        inputs:
          awsCredentials: 'AWS_Development'
          regionName: 'eu-west-2'
          scriptType: 'inline'
          disableAutoCwd: true
          workingDirectory: './cdk'
          inlineScript: |
            ENVIRONMENT=Shared npx cdk deploy InitStack
            export GIT_ACCESS_TOKEN=$(git_access_token)
            export SEMVER=$(Build.BuildNumber)
            export ENVIRONMENT=Integration
            export PIPELINE_TYPE=build
            npx cdk deploy BuildStack --require-approval=never
      - task: AWSShellScript@1
        displayName: Production / Prelive Build (replicates to production ECR repo)
        condition: and(succeeded(), in(variables['Build.SourceBranchName'], 'master', 'main'))
        inputs:
          awsCredentials: 'AWS_Development'
          regionName: 'eu-west-2'
          scriptType: 'inline'
          disableAutoCwd: true
          workingDirectory: './cdk'
          inlineScript: |
            export GIT_ACCESS_TOKEN=$(git_access_token)
            export SEMVER=$(Build.BuildNumber)
            export ENVIRONMENT=Prelive
            export PIPELINE_TYPE=build
            npx cdk deploy BuildStack --require-approval=never
  - job: GithubRelease
    dependsOn: build
    displayName: GithubRelease
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: 'x64'
    - script: | 
        pip install -r requirements.dev.txt
        pip install pyinstaller
        pyinstaller  --onefile ./croudtech_bootstrap_app/croudtech-bootstrap.py --clean
        cp ./dist/croudtech-bootstrap $(Build.ArtifactStagingDirectory)/croudtech-bootstrap
    - template: release/github-release.yaml@templates
      parameters:
        semVer: $(semVer)
        github_access_token: $(github_access_token)
        github_org: CroudTech
        github_repo: croudtech-python-bootstrap-app
      
