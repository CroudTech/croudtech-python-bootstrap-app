# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: "package_managers"
  - name: python_version
    value: 3.8
jobs:
  - job: test
    displayName: Test
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python_version)"
        displayName: "Use Python $(python_version)"

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: "Install dependencies"

      - script: |
          export AWS_DEFAULT_REGION=eu-west-2
          pip install pytest pytest-cov pytest-azurepipelines
          pytest
        displayName: "pytest"
  - job: build
    displayName: Build
    dependsOn: test
    condition: and(succeeded(), in(variables['Build.SourceBranchName'],  'integration', 'main'))
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python_version)"
        displayName: "Use Python $(python_version)"
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: 5.x
      - task: gitversion/execute@0
        displayName: Use GitVersion
      - task: TwineAuthenticate@1
        inputs:
          pythonUploadServiceConnection: croudtech-bootstrap
      - task: PyPIPublisher@0
        inputs:
          pypiConnection: 'PyPi'
          packageDirectory: '$(Build.Repository.LocalPath)'    
      - task: gitreleasemanager/addasset@0
        inputs:
          owner: "CroudTech"
          repository: "$(Build.Repository.Name)"
          token: "GitHubCroudControl"
          tagName: "$(semVer)"
          assets: "$(Build.SourcesDirectory)/dist"
