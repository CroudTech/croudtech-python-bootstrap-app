# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  - main
  - chore/*
  - feature/*

pool:
  vmImage: ubuntu-latest
resources:
  repositories:
    - repository: templates
      type: github
      name: CroudTech/devops-azure-pipelines-step-templates
      ref: master
      endpoint: CroudTech
    - repository: self
variables:
  - group: "package_managers"
  - name: python_version
    value: 3.12
jobs:
  # - job: PythonTest
  #   steps:
  #     - template: test/python-test.yaml@templates
  #       parameters:
  #         coverage: app,core,status
  #         root_dir: ./
  #         python_version: 3.12
  #         pipenv_version: 2023.12.1
  - job: build_glibc_2_31

    # dependsOn: PythonTest
    container: python:3.9.17-buster
    displayName: Build for GLIBC 2.
    steps:
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: 5.x
      - task: gitversion/execute@0
        displayName: Use GitVersion
      - script: |
          pip install poetry
          poetry version $(semVer)
          poetry self add "poetry-pyinstaller-plugin[plugin]"
          poetry install
          poetry build
          poetry config pypi-token.pypi $(pypi_token)
          poetry publish
          cp ./dist/pyinstaller/manylinux_2_31_x86_64/croudtech-boostrap $(Build.ArtifactStagingDirectory)/croudtech-bootstrap
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/croudtech-bootstrap-debian-bullseye"
          ArtifactName: "croudtech-bootstrap-debian-bullseye"
          publishLocation: "Container"
  - job: build_glibc_latest
    displayName: Build for GLIBC Latest
    dependsOn: build_glibc_2_31
    container: python:3.12.7
    condition: and(succeeded(), in(variables['Build.SourceBranchName'],  'integration', 'main'))
    steps:
      - script: |
          pip install poetry
          poetry version $(semVer)
          poetry self add "poetry-pyinstaller-plugin[plugin]"
          poetry install
          poetry build
          cp ./dist/pyinstaller/manylinux_2_31_x86_64/croudtech-boostrap $(Build.ArtifactStagingDirectory)/croudtech-bootstrap
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)/croudtech-bootstrap"
          ArtifactName: "croudtech-bootstrap"
          publishLocation: "Container"

  - job: GithubRelease
    dependsOn: build_glibc_latest
    displayName: GithubRelease
    steps:
      - download: current
        artifact: croudtech-bootstrap-debian-bullseye
      - download: current
        artifact: croudtech-bootstrap
      - script: |
          cp $(Pipeline.Workspace)/croudtech-bootstrap/croudtech-bootstrap $(Build.ArtifactStagingDirectory)
          cp $(Pipeline.Workspace)/croudtech-bootstrap-debian-bullseye/croudtech-bootstrap-debian-bullseye $(Build.ArtifactStagingDirectory)
      - template: release/github-release.yaml@templates
        parameters:
          semVer: $(semVer)
          github_access_token: $(github_access_token)
          github_org: CroudTech
          github_repo: croudtech-python-bootstrap-app
